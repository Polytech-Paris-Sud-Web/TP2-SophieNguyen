name: Continuous deployment

on:
  push:
    branches:
      - master
      - feature/add-cd # TODO: Temporary

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Copy Docker Compose configuration to remote
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          port: ${{ secrets.REMOTE_PORT }}
          source: "docker-compose.yml"
          target: "app"

      - name: Copy mocked database to remote
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          port: ${{ secrets.REMOTE_PORT }}
          source: "db"
          target: "app/db"

      - name: Deploy to hosted server
        uses: appleboy/ssh-action@master
        env:
          REGISTRY: ${{ env.REGISTRY }}
          CR_USERNAME: ${{ github.actor }}
          CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{secrets.REMOTE_HOST}}
          username: ${{secrets.REMOTE_USER}}
          password: ${{secrets.REMOTE_PASSWORD}}
          port: ${{secrets.REMOTE_PORT}}
          envs: REGISTRY,CR_USERNAME,CR_TOKEN
          script: |
            echo "Login to GitHub container registry..."
            echo $CR_TOKEN >> password.txt
            cat password.txt | docker login $CR_REGISTRY --username $CR_USERNAME --password-stdin
            rm -f password.txt
            cd app
            docker compose down
            docker compose up -d --no-build
